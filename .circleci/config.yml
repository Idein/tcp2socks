version: 2.1

constants:
  filters: &release-filter
    branches:
      ignore: /.*/
    tags:
      only: /^\d+.\d+.\d+(-.*)$/
  docker-image-rust: &docker-image-rust circleci/rust:1.50.0-buster

commands:
  restore-rust-cache:
    steps:
      - run: |
          cat Cargo.lock >> /tmp/build-dep
          cat rust-toolchain >> /tmp/build-dep
      - restore_cache:
          key: &cache-key-rust cache-cargo-target-{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CIRCLECI_CACHE_VERSION }}-{{ checksum "/tmp/build-dep" }}
  save-rust-cache:
    steps:
      - save_cache:
          key: *cache-key-rust
          paths:
            - ~/.cargo
            - target
  install-rustup:
    steps:
      - run: |
          cat rust-toolchain >> /tmp/rustup
      - restore_cache:
          key: &cache-key-rustup cache-rustup-{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CIRCLECI_CACHE_VERSION }}-{{ checksum "/tmp/rustup" }}
      - run:
          name: Install Rust
          command: |
            if rustup help >& /dev/null
            then
                rustup update
            else
                curl -sSfL https://sh.rustup.rs > rustup.sh
                export RUST_CHANNEL=`cat rust-toolchain`
                sh rustup.sh -y --default-toolchain ${RUST_CHANNEL}-x86_64-unknown-linux-gnu --profile minimal
            fi
            echo "export PATH=\"$PATH:$HOME/.cargo/bin\"" >> $BASH_ENV
      - save_cache:
          key: *cache-key-rustup
          paths:
            - ~/.rustup

jobs:
  build-and-test:
    docker:
      - image: *docker-image-rust
        environment:
          RUST_BACKTRACE: 1
          CARGO_HOME: /home/circleci/.cargo
          GIT_AUTHOR_NAME: circleci
          GIT_AUTHOR_EMAIL: circleci@example.com
    steps:
      - checkout
      - run:
          name: Merge origin/main
          command: |
            git merge --no-edit origin/main
      - run:
          name: Environment Setup
          command: |
            rustup component add clippy
      - restore-rust-cache
      - run:
          name: Format
          command: cargo fmt -- --check
      - run:
          name: Lint
          command: cargo clippy -- -D warnings
      - run:
          name: Build
          command: |
            cargo build --verbose
      - run:
          name: Unit Test
          command: |
            cargo test --verbose -- --nocapture
      - run:
          name: Integration Test
          command: |
            cargo test --verbose -- --nocapture --ignored
      - save-rust-cache
  validate-release-version:
    docker:
      - image: *docker-image-rust
    steps:
      - checkout
      - restore-rust-cache
      - run:
          name: Check tag (version) starts with crate_version
          command: |
            version=$(git describe --tags)                                                      # e.g., 1.2.3 or 1.2.3-rc
            crate_version=$(cargo run -- --version 2>/dev/null | grep -o '[0-9]\.[0-9]\.[0-9]') # e.g., 1.2.3
            echo "$version" | grep -q "^${crate_version}"
  build-release:
    parameters:
      target:
        type: string
    machine:
      image: ubuntu-1604:201903-01
    environment:
      RUST_BACKTRACE: 1
    steps:
      - checkout
      - install-rustup
      - run: |
          cargo install cross
      # We do test here, not in separated job, because machine executor requires some overhead to spin-up.
      - run:
          name: Test
          command: |
            target=<<parameters.target>>
            cross test --verbose --target "$target" -- --nocapture
            cross test --verbose --target "$target" -- --nocapture --ignored
      - run:
          name: Build Release
          command: |
            target=<<parameters.target>>
            cross build --verbose --target "$target" --release
      - run:
          name: Make Artifact
          command: |
            version=$(git describe --tags)
            target=<<parameters.target>>
            name="tcp2socksd-${version}-${target}"
            mkdir -p "/tmp/work/$name"
            mkdir -p /tmp/tmp/artifacts
            cp "target/${target}/release/tcp2socksd" "/tmp/work/$name/"
            cd /tmp/work
            tar cvzf "$name.tar.gz" "$name"
            mv "$name.tar.gz" /tmp/tmp/artifacts/
      - persist_to_workspace:
          root: /tmp/tmp/
          paths:
            - .
  pre-publish-github-release:
    docker:
      - image: cimg/base:2020.01
    working_directory: /tmp/persist
    steps:
      - attach_workspace:
          at: /tmp/persist
      - run: |
          tar cvzf artifacts.tar.gz artifacts
      - store_artifacts:
          path: artifacts.tar.gz
          destination: artifacts.tar.gz
  publish-github-release:
    docker:
      - image: cibuilds/github:0.13
    steps:
      - attach_workspace:
          at: /tmp/persist
      - checkout
      - run:
          name: "Publish Release on GitHub"
          command: |
            version=$(git describe --tags)
            ghr -t "$GITHUB_TOKEN" -u "$CIRCLE_PROJECT_USERNAME" -r "$CIRCLE_PROJECT_REPONAME" -c "$CIRCLE_SHA1" -delete "$version" /tmp/persist/artifacts

workflows:
  version: 2.1
  commit:
    jobs:
      - build-and-test
  release:
    jobs:
      - validate-release-version:
          filters: *release-filter
      - build-release:
          filters: *release-filter
          requires:
            - validate-release-version
          matrix:
            parameters:
              target:
                - x86_64-unknown-linux-musl
                - arm-unknown-linux-gnueabihf
      - pre-publish-github-release:
          filters: *release-filter
          requires:
            - build-release
      - approve-release:
          filters: *release-filter
          type: approval
          requires:
            - pre-publish-github-release
      - publish-github-release:
          filters: *release-filter
          requires:
            - approve-release
          context:
            - github-token
